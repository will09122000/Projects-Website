{
    "Personal": {
      "EERC_Bot": {},
      "Website": {}
    },
    "GCSE": {},
    "A_Level": {
      "Rowing_Monitor": {}
    },
    "First_Year": {
        "Countdown_Simulator": {
          "a": "This was my first programming coursework at Univeristy, it is a simulated game of Countdown from a command-line interface.",
          "b": "The user is prompted 9 times to choose either a vowel or a consonant using the letters 'v' and 'c' as inputs. A random letter depending on their input is added to a list using the same probability distribution from the Countdown show.  The 9 letters for this function will be returned as a string.",
          "c": "A list of words is created from 'words.txt' with punctuation removed and words less than 10 letters long. The argument for this function is expected to be the name of a text file as a string. The words will then be returned as a list.",
          "d": "The next function will take the 9 letter string and return two lists. The first being all possible words that can be made from those 9 letters and the second being the longest words that can be made.",
          "e": "The last main function asks the user to input their best guess as well as being given the chance to shuffle the letters. Their input is checked against all possible words to see if there is a match. If there is the program will print out: the number of points scored, statistics on how 'good' their word was, if they scored maximum points and lastly a list of the longest words."

        },
        "Smart_Alarm_Clock": {
            "Main": "This program is a smart alarm clock intended to be run 24/7. It enables the user to schedule, edit and cancel alarms. The user is notified when an alarm is up via an alarm sound, text to speech and a notification which is displayed in the notifications column. The user is also notified when the weather in the location selected has changed and when there is a new news story. The web page will automatically refresh every 5 minutes to keep the notifications, weather and news up to date on screen.",
            "Notifications": "This module is responsible for all notification functionality. It displays the latest notifications in the centre column on the webpage ordered by time. The user can clear the notifications or filter the displayed notifications from three categories: alarms, weather and news.",
            "Alarms": "This module is responsible for all alarm functionality. The user can add new alarms with the two optional options. First, they can select days of the week for the alarm to repeat on. Secondly, an alarm label which is displayed in notifications and read out to the user when the alarm goes off along with an alarm sound. The alarm is also logged when it goes off along with the appropriate data. The user edit the time of a regular alarm or repeating alarm once it's been set and delete alarms.",
            "News": "This module is responsible for all news functionality. It uses newsapi to fetch the latest news stories every 60 seconds",
            "Weather": "This module is responsible for all weather functionality. It uses openweathermap to fetch the current weather in the given location every 30 seconds. This data is then displayed on the main page. A notification is sent each time weather has been fetched and some data has changed, this is also logged. The user can change the location of the weather with the name of a Town or City."
        },
        "Barnabys_Brewhouse": {
          "Main": "This program provides multiple features to make processing beer and decision making easier for Barnaby's Brewhouse. This is achieved through python and basic html/css using the flask libary to display a web interface",
          "Batch_Management": "This module is responsible for handling the creation, movement and termination of batches created from the user interface. It allows the user to upload a new batch of beer with the choice of a tank preference and if not the most suitable tank is automatically picked displaying all batches currently being processed.",
          "Tank_Management": "This module is reponsible for fetching the status of each tank. The status of each tank is then displayed with details of the batch inside each tank.",
          "Inventory": "This module handles fetching the inventory from the json file and updating the inventory when a manual update is requested. The inventory is then displayed for each beer enabling them to update the stock manually in case beers are returned or other unforeseen circumstances.",
          "Order_Management": "This module is responsible for handling customer orders inputted by the user via the user interface. It allowes the user to upload sales data to be used to influence the planning decisions on which beer to brew next with reasoning.",
          "Beer_Suggestion": "This module is responsible for suggesting the type of beer that should be produced. A score for each beer type is accumulated through the module and the highest score is the beer that is suggested next.",
          "Sales_Preditions": "This module is responsible for predicting the demand of each beer type for a month of sales 3 months from the current date. The average growth and sales from the same month in the previous years are used to calculate this prediction."
        },
        "Beanbag_Store": {},
        "Task_Manager": {},
        "Lift_Algorithm": {}
      },
    "Second_Year": {},
    "Thrid_Year": {},
    "Fourth_Year": {}
  }